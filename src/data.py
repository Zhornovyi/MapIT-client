import mongoengine as me
from logging import getLogger, INFO
from telebot import TeleBot
from src.schemas import Quiz, Question

logger = getLogger("course_bot")
logger.setLevel(INFO)

class Data:
    def __init__(self, conn_string: str, bot: TeleBot):
        self.bot = bot
        me.connect(host=conn_string)
        logger.info("Mongo db connected successfully")
        self.add_quizes()

    def add_quizes(self):
        if len(Quiz.objects) == 0:
            self.commit_registration_quiz()
            logger.info("Registration quiz has been added")
        else:
            self.update_quiz_table()
            logger.info("Quizes have been updated")
        if Quiz.objects.filter(name="TestingQuiz").count() == 0:
            self.commit_testing_quiz()
            logger.info("Testing quiz has been added")
        
    def commit_registration_quiz(self):

        quiz = Quiz(name="RegistrationQuiz", is_required=True)

        q_name = Question(name="name",
                                  message="–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º º—è:",
                                  correct_answer_message="–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å ü•∞",
                                  wrong_answer_message="–í–≤–µ–¥–∏ —ñ–º‚Äô—è —Ç–µ–∫—Å—Ç–æ–º ü§°",
        )
        q_contact = Question(name="contact",
                             message="–û–±–º—ñ–Ω—è—î–º–æ—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏?",
                             buttons=["–¢—Ä–∏–º–∞–π!"],
                             input_type="contact",
                             correct_answer_message="–î—è–∫—É—é. –ê —è –∑–∞–ª–∏—à–∞—é —Ç–æ–±—ñ –∫–æ–Ω—Ç–∞–∫—Ç –≥–æ–ª–æ–≤–Ω–æ–≥–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞: @Slavkoooo ü•∞",
                             wrong_answer_message="–ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç ü§°",
        )
        q_email = Question(name="email",
                           message="–ù–∞–æ—Å—Ç–∞–Ω–æ–∫, –≤–∫–∞–∂–∏ –∞–¥—Ä–µ—Å—É —Å–≤–æ—î—ó –ø–æ—à—Ç–æ–≤–æ—ó —Å–∫—Ä–∏–Ω—å–∫–∏.",
                           regex="^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$",
                           correct_answer_message="–î—è–∫—É—é ü•∞",
                           wrong_answer_message="–í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É ü§°")

        quiz.questions = [q_name, q_contact, q_email]
        quiz.save()

    def commit_testing_quiz(self):
        quiz = Quiz(name="TestingQuiz", is_required=False)
        q_age = Question(
            name="child_age",
            message="–í–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ –¥–∏—Ç–∏–Ω–∏",
            buttons=[
                "6-8 —Ä–æ–∫—ñ–≤",
                "9-11 —Ä–æ–∫—ñ–≤",
                "12-14 —Ä–æ–∫—ñ–≤",
                "15+ —Ä–æ–∫—ñ–≤",
            ],
            allow_user_input=False,
            correct_answer_message="–°—É–ø–µ—Ä",
            wrong_answer_message="–û–±–µ—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –º–µ–Ω—é",
        )

        q_sex = Question(
            name="sex",
            message="–í–≤–µ–¥—ñ—Ç—å —Å—Ç–∞—Ç—å –¥–∏—Ç–∏–Ω–∏?",
            buttons=["–•–ª–æ–ø—á–∏–∫", "–î—ñ–≤—á–∏–Ω–∫–∞"],
            correct_answer_message="–ó–∞–ø–∏—Å–∞–≤",
            allow_user_input=False,
            wrong_answer_message="–û–±–µ—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –º–µ–Ω—é",
        )

        q_format = Question(
            name="format",
            message="–í–≤–µ–¥—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –∑–∞–Ω—è—Ç—å.",
            buttons=["Online", "Offline", "–†–æ–∑–≥–ª—è–Ω—É –æ–±–∏–¥–≤–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏"],
            correct_answer_message="–î—è–∫—É—é ü•∞",
            wrong_answer_message="–û–±–µ—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –º–µ–Ω—é",
            allow_user_input=False,
        )
        # must be added only if q_format
        q_city = Question(
            name="city",
            message="–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è –∑–∞–Ω—è—Ç—å.",
            correct_answer_message="–î—è–∫—É—é ü•∞",
            max_text_size=30,
            wrong_answer_message="–ú–∏ –Ω–µ –º–æ–∂–µ–º–æ –Ω—ñ—á–æ–≥–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —É –¥–∞–Ω–æ–º—É –º—ñ—Å—Ç—ñ, –º–æ–∂–ª–∏–≤–æ —Ö–æ—á–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–µ?",
        )
        q_type = Question(
            name="type",
            message="–Ø–∫–∏–π —Ç–∏–ø –∑–∞–Ω—è—Ç—å –æ–±–µ—Ä–µ—Ç–µ?",
            buttons=["–ì—Ä—É–ø–æ–≤—ñ", "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ"],
            correct_answer_message="–ó–∞–ø–∏—Å–∞–≤",
            wrong_answer_message="–û–±–µ—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –º–µ–Ω—é",
            allow_user_input=False,
        )
        q_thinking = Question(
            name="thinking",
            message="–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –º–∏—Å–ª–µ–Ω–Ω—è –¥–∏—Ç–∏–Ω–∏?",
            buttons=["–¢–≤–æ—Ä—á–∏–π", "–õ–æ–≥—ñ—á–Ω–∏–π"],
            correct_answer_message="–ó–∞–ø–∏—Å–∞–≤",
            wrong_answer_message="–û–±–µ—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –º–µ–Ω—é",
            allow_user_input=False,
        )
        # must be added only if q_thinking 
        q_exp_it = Question(
            name="experience_it",
            message="–ß–∏ –º–∞—î –¥–∏—Ç–∏–Ω–∞ –¥–æ—Å–≤—ñ–¥ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è?",
            buttons=["–ú–∞—î", "–ù–µ–º–∞—î"],
            correct_answer_message="–ó–∞–ø–∏—Å–∞–≤",
            wrong_answer_message="–û–±–µ—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –º–µ–Ω—é",
            allow_user_input=False,
        )
        # must be added only if q_format 
        q_exp_online = Question(
            name="experence_online",
            message="–ß–∏ –º–∞—î –¥–∏—Ç–∏–Ω–∞ –¥–æ—Å–≤—ñ–¥ –æ–Ω–ª–∞–π–Ω –Ω–∞–≤—á–∞–Ω–Ω—è?",
            buttons=["–ú–∞—î", "–ù–µ–º–∞—î"],
            correct_answer_message="–ó–∞–ø–∏—Å–∞–≤",
            wrong_answer_message="–û–±–µ—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –º–µ–Ω—é",
            allow_user_input=False,
        )

        quiz.questions = [
            q_age,
            q_sex,
            q_format,
            q_city,
            q_type,
            q_thinking,
            q_exp_it,
            q_exp_online
        ]
        quiz.save()
    
    def update_quiz_table(self):
        quizes = Quiz.objects

        # form paragraphs in questions
        for quiz in quizes:
            for question in quiz.questions:
                question.message = question.message.replace("\\n", "\n")

            quiz.save()



